<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Create stats and HUD objects
instance_create(0, 0, con_gameStats);
instance_create(0, 0, con_hud);

//Load in audio for the game
if (!audio_group_is_loaded(audioGroup_effects))
{
    audio_group_load(audioGroup_effects);
}
if (!audio_group_is_loaded(audioGroup_voice))
{
    audio_group_load(audioGroup_voice);
}
if (!audio_group_is_loaded(audioGroup_announcer))
{
    audio_group_load(audioGroup_announcer);
}

//Load in player voice audio into a 2d array
init_playerVoice();

//Create and load in the correct room settings
//I could probably do this without a switch statement
switch (room)
{
    case rm_arena1:
        instance_create(0, 0, obj_map1);
        load_level("level1.txt");
    break;
    
    case rm_arena2:
        instance_create(0, 0, obj_map2);
        load_level("level2.txt");
    break;
    
    case rm_arena3:
        instance_create(0, 0, obj_map3);
        load_level("level3.txt");
    break;
    
    case rm_arena4:
        instance_create(0, 0, obj_map4);
        load_level("level4.txt");
    break;
    
    case rm_arena5:
        instance_create(0, 0, obj_map5);
        load_level("level5.txt");
    break;
}

//Create player objects at their respective spawns
if (global.game_playerTeam[1] != 5)
{
    instance_create(map_playerSpawn[0, 0], map_playerSpawn[0, 1], obj_player1);
}

if (global.game_playerTeam[2] != 5)
{
    instance_create(map_playerSpawn[1, 0], map_playerSpawn[1, 1], obj_player2);
}

if (global.game_playerTeam[3] != 5)
{
    instance_create(map_playerSpawn[2, 0], map_playerSpawn[2, 1], obj_player3);
}

if (global.game_playerTeam[4] != 5)
{
    instance_create(map_playerSpawn[3, 0], map_playerSpawn[3, 1], obj_player4);
}

//Create weapon pickups and give them specific weapons
var pickup_railgun = instance_create(map_weaponSpawn[0, 0], map_weaponSpawn[0, 1], obj_pickup_stand);
pickup_railgun.pickup_type = 6;

var pickup_shotgun = instance_create(map_weaponSpawn[1, 0], map_weaponSpawn[1, 1], obj_pickup_stand);
pickup_shotgun.pickup_type = 2;

var pickup_rocket = instance_create(map_weaponSpawn[2, 0], map_weaponSpawn[2, 1], obj_pickup_stand);
pickup_rocket.pickup_type = 3;

var pickup_grenade = instance_create(map_weaponSpawn[3, 0], map_weaponSpawn[3, 1], obj_pickup_stand);
pickup_grenade.pickup_type = 5;

var pickup_plasma = instance_create(map_weaponSpawn[4, 0], map_weaponSpawn[4, 1], obj_pickup_stand);
pickup_plasma.pickup_type = 4;

//Game state variables
global.game_warmup    = 0;
global.game_countdown = 1;
global.game_active    = 2;
global.game_over      = 3;

//Assign the game state the intial state
global.game_state = global.game_warmup;

//Gamemode specific create stuff
switch (global.game_gamemode)
{
    //Deathmatch
    case 0:
    
    break;
    
    //1 Flag CTF
    case 1:
        //Create the flag and remove the railgun weapon pickup
        //I will change this eventually
        instance_create(map_flagSpawn[0], map_flagSpawn[1], obj_flag);
        
        with (pickup_railgun)
        {
            instance_destroy();
        }
        
        //Create the player stands at the player spawn points
        var stand1 = instance_create(map_playerSpawn[0, 0] - 32, map_playerSpawn[0, 1] - 32, obj_stand);
        stand1.stand_teamID = obj_player1.plyr_teamID;
        
        var stand2 = instance_create(map_playerSpawn[1, 0] - 32, map_playerSpawn[1, 1] - 32, obj_stand);
        stand2.stand_teamID = obj_player2.plyr_teamID;
        
        var stand3 = instance_create(map_playerSpawn[2, 0] - 32, map_playerSpawn[2, 1] - 32, obj_stand);
        stand3.stand_teamID = obj_player3.plyr_teamID;
        
        var stand4 = instance_create(map_playerSpawn[3, 0] - 32, map_playerSpawn[3, 1] - 32, obj_stand);
        stand4.stand_teamID = obj_player4.plyr_teamID;
    break;
    
    //Insta Jib
    case 2:
        with (obj_pickup_stand)
        {
            instance_destroy();
        }
    break;
    
    //Oddball
    case 3:
        instance_create(map_flagSpawn[0], map_flagSpawn[1], obj_flag);
        
        with (pickup_railgun)
        {
            instance_destroy();
        }
    break;
}

//Variable which will decide if end game stats should be calculated
do_gameOverStuff = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player 4 respawn

var x1 = 0;
var y1 = 1;
var x2 = 2;
var y2 = 3;

if (global.game_state == global.game_active)
{
    if (global.game_gamemode == 0)
    {
        var spawn_look = true;
        
        while (spawn_look == true)
        {
            var i = irandom(3);
            
            switch (i)
            {
                case 0:
                    if (!collision_rectangle(map_spawnBoundry[0, x1], map_spawnBoundry[0, y1], map_spawnBoundry[0, x2], map_spawnBoundry[0, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[0, x1], map_playerSpawn[0, y1], obj_player4);
                        spawn_look = false;
                    }
                break;
                
                case 1:
                    if (!collision_rectangle(map_spawnBoundry[1, x1], map_spawnBoundry[1, y1], map_spawnBoundry[1, x2], map_spawnBoundry[1, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[1, x1], map_playerSpawn[1, y1], obj_player4);
                        spawn_look = false;
                    }
                break;
                
                case 2:
                    if (!collision_rectangle(map_spawnBoundry[2, x1], map_spawnBoundry[2, y1], map_spawnBoundry[2, x2], map_spawnBoundry[2, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[2, x1], map_playerSpawn[2, y1], obj_player4);
                        spawn_look = false;
                    }
                break;
                
                case 3:
                    if (!collision_rectangle(map_spawnBoundry[3, x1], map_spawnBoundry[3, y1], map_spawnBoundry[3, x2], map_spawnBoundry[3, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[3, x1], map_playerSpawn[3, y1], obj_player4);
                        spawn_look = false;
                    }
                break;
            }
        }
    }
    else
    {
        var inst = instance_create(map_playerSpawn[3, x1], map_playerSpawn[3, y1], obj_player4);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player 3 respawn

var x1 = 0;
var y1 = 1;
var x2 = 2;
var y2 = 3;

if (global.game_state == global.game_active)
{
    if (global.game_gamemode == 0)
    {
        var spawn_look = true;
        
        while (spawn_look == true)
        {
            var i = irandom(3);
            
            switch (i)
            {
                case 0:
                    if (!collision_rectangle(map_spawnBoundry[0, x1], map_spawnBoundry[0, y1], map_spawnBoundry[0, x2], map_spawnBoundry[0, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[0, x1], map_playerSpawn[0, y1], obj_player3);
                        spawn_look = false;
                    }
                break;
                
                case 1:
                    if (!collision_rectangle(map_spawnBoundry[1, x1], map_spawnBoundry[1, y1], map_spawnBoundry[1, x2], map_spawnBoundry[1, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[1, x1], map_playerSpawn[1, y1], obj_player3);
                        spawn_look = false;
                    }
                break;
                
                case 2:
                    if (!collision_rectangle(map_spawnBoundry[2, x1], map_spawnBoundry[2, y1], map_spawnBoundry[2, x2], map_spawnBoundry[2, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[2, x1], map_playerSpawn[2, y1], obj_player3);
                        spawn_look = false;
                    }
                break;
                
                case 3:
                    if (!collision_rectangle(map_spawnBoundry[3, x1], map_spawnBoundry[3, y1], map_spawnBoundry[3, x2], map_spawnBoundry[3, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[3, x1], map_playerSpawn[3, y1], obj_player3);
                        spawn_look = false;
                    }
                break;
            }
        }
    }
    else
    {
        var inst = instance_create(map_playerSpawn[2, x1], map_playerSpawn[2, y1], obj_player3);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player 2 respawn

var x1 = 0;
var y1 = 1;
var x2 = 2;
var y2 = 3;

if (global.game_state == global.game_active)
{
    if (global.game_gamemode == 0)
    {
        var spawn_look = true;
        
        while (spawn_look == true)
        {
            var i = irandom(3);
            
            switch (i)
            {
                case 0:
                    if (!collision_rectangle(map_spawnBoundry[0, x1], map_spawnBoundry[0, y1], map_spawnBoundry[0, x2], map_spawnBoundry[0, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[0, x1], map_playerSpawn[0, y1], obj_player2);
                        spawn_look = false;
                    }
                break;
                
                case 1:
                    if (!collision_rectangle(map_spawnBoundry[1, x1], map_spawnBoundry[1, y1], map_spawnBoundry[1, x2], map_spawnBoundry[1, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[1, x1], map_playerSpawn[1, y1], obj_player2);
                        spawn_look = false;
                    }
                break;
                
                case 2:
                    if (!collision_rectangle(map_spawnBoundry[2, x1], map_spawnBoundry[2, y1], map_spawnBoundry[2, x2], map_spawnBoundry[2, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[2, x1], map_playerSpawn[2, y1], obj_player2);
                        spawn_look = false;
                    }
                break;
                
                case 3:
                    if (!collision_rectangle(map_spawnBoundry[3, x1], map_spawnBoundry[3, y1], map_spawnBoundry[3, x2], map_spawnBoundry[3, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[3, x1], map_playerSpawn[3, y1], obj_player2);
                        spawn_look = false;
                    }
                break;
            }
        }
    }
    else
    {
        var inst = instance_create(map_playerSpawn[1, x1], map_playerSpawn[1, y1], obj_player2);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player 1 respawn

var x1 = 0;
var y1 = 1;
var x2 = 2;
var y2 = 3;

if (global.game_state == global.game_active)
{
    if (global.game_gamemode == 0)
    {
        var spawn_look = true;
        
        while (spawn_look == true)
        {
            var i = irandom(3);
            
            switch (i)
            {
                case 0:
                    if (!collision_rectangle(map_spawnBoundry[0, x1], map_spawnBoundry[0, y1], map_spawnBoundry[0, x2], map_spawnBoundry[0, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[0, x1], map_playerSpawn[0, y1], obj_player1);
                        spawn_look = false;
                    }
                break;
                
                case 1:
                    if (!collision_rectangle(map_spawnBoundry[1, x1], map_spawnBoundry[1, y1], map_spawnBoundry[1, x2], map_spawnBoundry[1, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[1, x1], map_playerSpawn[1, y1], obj_player1);
                        spawn_look = false;
                    }
                break;
                
                case 2:
                    if (!collision_rectangle(map_spawnBoundry[2, x1], map_spawnBoundry[2, y1], map_spawnBoundry[2, x2], map_spawnBoundry[2, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[2, x1], map_playerSpawn[2, y1], obj_player1);
                        spawn_look = false;
                    }
                break;
                
                case 3:
                    if (!collision_rectangle(map_spawnBoundry[3, x1], map_spawnBoundry[3, y1], map_spawnBoundry[3, x2], map_spawnBoundry[3, y2], par_player, false, true))
                    {
                        var inst = instance_create(map_playerSpawn[3, x1], map_playerSpawn[3, y1], obj_player1);
                        spawn_look = false;
                    }
                break;
            }
        }
    }
    else
    {
        var inst = instance_create(map_playerSpawn[0, x1], map_playerSpawn[0, y1], obj_player1);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Start the game if F3 is pressed and the game has not started
if (global.game_state == global.game_warmup)
{
    if (keyboard_check_pressed(vk_f3))
    {
        global.game_state = global.game_countdown;
        
        instance_create(x, y, con_countdown);
    }
}

//Player Respawns if that player is active and they don't exist
if (global.game_state == global.game_active)
{
    if (global.game_playerTeam[1] != 5)
    {
        if (!instance_exists(obj_player1))
        {
            if (alarm[0] = -1)
            {
                alarm[0] = 60 * 3;
            }
        }
    }
    
    if (global.game_playerTeam[2] != 5)
    {
        if (!instance_exists(obj_player2))
        {
            if (alarm[1] = -1)
            {
                alarm[1] = 60 * 3;
            }
        }
    }
    
    if (global.game_playerTeam[3] != 5)
    {
        if (!instance_exists(obj_player3))
        {
            if (alarm[2] = -1)
            {
                alarm[2] = 60 * 3;
            }
        }
    }
    
    if (global.game_playerTeam[4] != 5)
    {
        if (!instance_exists(obj_player4))
        {
            if (alarm[3] = -1)
            {
                alarm[3] = 60 * 3;
            }
        }
    }
}

//check for input for restarts or menus if the game is over
if (global.game_state == global.game_over)
{
    for (var i = 1; i &lt; 5; i ++)
    {
        if (unifiedInput_pressed(i, global.key_shoot))
        {
            room_goto(rm_menu);
        }
        
        if (unifiedInput_pressed(i, global.key_pickup))
        {
            room_restart();
        }
    }
}

//Check to see if a player has won
for (var i = 1; i &lt; 5; i ++)
{
    if (con_gameStats.globalStats_teamScore[i] &gt;= global.game_modePoints)
    {
        if (do_gameOverStuff == true)
        {
            global.game_state = global.game_over;
            do_gameOverStuff = false;
            
            winning_team = i;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Unload the audio on room end
if (audio_group_is_loaded(audioGroup_effects))
{
    audio_group_unload(audioGroup_effects);
}
if (audio_group_is_loaded(audioGroup_voice))
{
    audio_group_unload(audioGroup_voice);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch (global.game_state)
{
    case global.game_warmup:
        //Draw the press f3 to start text
        //A semi transparent drop shadow on these boxes might look nice
        draw_set_colour(c_white);
        var x1 = (room_width / 2) - 512;
        var y1 = (room_height / 4);
        var x2 = x1 + 1024;
        var y2 = y1 + 64;
        draw_rectangle(x1, y1, x2, y2, false);
        
        draw_set_font(fnt_roboto_25);
        draw_set_colour(c_black);
        draw_set_halign(1);
        draw_set_valign(1);
        
        draw_text(x1 + 512, y1 + 32, "Press F3 to start the game");
    break;
    
    case global.game_over:
        //Draw the results screen
        draw_set_font(fnt_roboto_25);
        draw_set_colour(c_white);
        draw_rectangle(560, 80, 1360, 944, false);
        
        draw_results_screen();
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
