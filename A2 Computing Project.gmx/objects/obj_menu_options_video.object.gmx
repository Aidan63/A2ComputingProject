<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
menu_optionsVideoSelected = 0;
menu_resolutionIndex      = global.screen_preset;

menu_realWindowType       = global.screen_window;
menu_realVsync            = global.screen_vsync ;

menu_optionsVideoText[0] = "Resolution" ;
menu_optionsVideoText[1] = "Window Type";
menu_optionsVideoText[2] = "Vsync"      ;
menu_optionsVideoText[3] = "apply"      ;
menu_optionsVideoText[4] = "Back"       ;

menu_variableTextRes[0] = "640x480"  ;
menu_variableTextRes[1] = "800x600"  ;
menu_variableTextRes[2] = "1024x768" ;
menu_variableTextRes[3] = "1280x720" ;
menu_variableTextRes[4] = "1600x900" ;
menu_variableTextRes[5] = "1920x1080";
menu_variableTextRes[6] = string(global.screen_width) + "x" + string(global.screen_height) + " : custom";

menu_variableText[0] = menu_variableTextRes[0];
menu_variableText[1] = "Fullscreen"           ;
menu_variableText[2] = "On"                   ;
menu_variableText[3] = ""                     ;
menu_variableText[4] = ""                     ;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
window_set_size(global.screen_width, global.screen_height);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (keyboard_check_pressed(vk_up))
{
    menu_optionsVideoSelected --;
}
if (keyboard_check_pressed(vk_down))
{
    menu_optionsVideoSelected ++;
}

switch (menu_optionsVideoSelected)
{
    case 0:
        if (keyboard_check_pressed(vk_left))
        {
            menu_resolutionIndex --;
        }
        if (keyboard_check_pressed(vk_right))
        {
            menu_resolutionIndex ++;
        }
    break;
    
    case 1:
        if (keyboard_check_pressed(vk_left))
        {
            menu_realWindowType --;
        }
        if (keyboard_check_pressed(vk_right))
        {
            menu_realWindowType ++;
        }
    break;
    
    case 2:
        if (keyboard_check_pressed(vk_left))
        {
            menu_realVsync --;
        }
        if (keyboard_check_pressed(vk_right))
        {
            menu_realVsync ++;
        }
    break;
    
    case 3:
        if (keyboard_check_pressed(vk_enter))
        {
            global.screen_preset = menu_resolutionIndex;
            global.screen_window = menu_realWindowType ;
            global.screen_vsync  = menu_realVsync      ;
            
            switch (global.screen_preset)
            {
                case 0:
                    global.screen_width  = 640;
                    global.screen_height = 480;
                break;
                
                case 1:
                    global.screen_width  = 800;
                    global.screen_height = 600;
                break;
                
                case 2:
                    global.screen_width  = 1024;
                    global.screen_height = 768 ;
                break;
                
                case 3:
                    global.screen_width  = 1280;
                    global.screen_height = 720 ;
                break;
                
                case 4:
                    global.screen_width  = 1600;
                    global.screen_height = 900 ;
                break;
                
                case 5:
                    global.screen_width  = 1920;
                    global.screen_height = 1080;
                break;
            }
            
            window_set_fullscreen(global.screen_window);
            
            display_reset(0, global.screen_vsync);
            
            alarm[0] = 5;
            
            ini_open(working_directory + "settings.ini");
            
            ini_write_real("video", "window", global.screen_window);
            ini_write_real("video", "vsync" , global.screen_vsync );
            ini_write_real("video", "preset", global.screen_preset);
            
            ini_write_real("video", "width" , global.screen_width );
            ini_write_real("video", "height", global.screen_height);
            
            ini_close();
        }
    break;
    
    case 4:
        if (keyboard_check_pressed(vk_enter))
        {
            instance_create(0, 0, obj_menu_options);
            instance_destroy();
        }
    break;
}

menu_optionsVideoSelected = clamp(menu_optionsVideoSelected, 0, 4);
menu_resolutionIndex      = clamp(menu_resolutionIndex     , 0, array_length_1d(menu_variableTextRes) - 1);
menu_realWindowType       = clamp(menu_realWindowType      , 0, 1);
menu_realVsync            = clamp(menu_realVsync           , 0, 1);

menu_variableText[0]      = menu_variableTextRes[menu_resolutionIndex];

menu_video_variableText();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_halign(0);
draw_set_valign(1);
draw_set_font(fnt_roboto_25);

for (var i = 0; i &lt; 5; i ++)
{
    if (menu_optionsVideoSelected == i)
    {
        draw_set_colour(c_red);
        draw_text(64 , 64 + (i * 32), string(menu_optionsVideoText[i]));
        draw_text(512, 64 + (i * 32), string(menu_variableText[i]    ));
    }
    else
    {
        draw_set_colour(c_black);
        draw_text(64 , 64 + (i * 32), string(menu_optionsVideoText[i]));
        draw_text(512, 64 + (i * 32), string(menu_variableText[i]    ));
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
