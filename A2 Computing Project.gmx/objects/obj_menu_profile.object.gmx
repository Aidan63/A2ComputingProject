<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
menu_profileSelector  = 0;
menu_profilePlayer    = 1;

menu_profileText[0 ] = "Player";
menu_profileText[1 ] = "Name";
menu_profileText[2 ] = "Sprite";
menu_profileText[3 ] = "Voicepack";
menu_profileText[4 ] = "Control Method";
menu_profileText[5 ] = "Key Jump";
menu_profileText[6 ] = "Key Left";
menu_profileText[7 ] = "Key Right";
menu_profileText[8 ] = "Key Shoot";
menu_profileText[9 ] = "Key Pickup";
menu_profileText[10] = "Save";
menu_profileText[11] = "Back";

for (var i = 1; i &lt; 5; i ++)
{
    var file_name = "player" + string(i) + ".ini";
    ini_open(working_directory + file_name);
    
    show_debug_message(file_name);
    
    //Real Variables
    menu_variableReal[i, 2 ] = ini_read_real("player-settings", "sprite" , 0);
    menu_variableReal[i, 3 ] = ini_read_real("player-settings", "voice"  , 0);
    menu_variableReal[i, 4 ] = ini_read_real("player-settings", "control", 0);
    
    //String Variable
    menu_variableText[i, 0 ] = 1;
    menu_variableText[i, 1 ] = ini_read_string("player-settings", "name", "Player " + string(i));
    menu_variableText[i, 2 ] = "";
    menu_variableText[i, 3 ] = "";
    menu_variableText[i, 4 ] = "";
    
    menu_variableText[i, 5 ] = unifiedInput_keyboard_keyName(ds_grid_get(con_unifiedInput.input_keyboardGrid, i, global.key_jump  ));
    menu_variableText[i, 6 ] = unifiedInput_keyboard_keyName(ds_grid_get(con_unifiedInput.input_keyboardGrid, i, global.key_left  ));
    menu_variableText[i, 7 ] = unifiedInput_keyboard_keyName(ds_grid_get(con_unifiedInput.input_keyboardGrid, i, global.key_right ));
    menu_variableText[i, 8 ] = unifiedInput_keyboard_keyName(ds_grid_get(con_unifiedInput.input_keyboardGrid, i, global.key_shoot ));
    menu_variableText[i, 9 ] = unifiedInput_keyboard_keyName(ds_grid_get(con_unifiedInput.input_keyboardGrid, i, global.key_pickup));
    
    menu_variableText[i, 10] = "";
    menu_variableText[i, 11] = "";
    
    ini_close();
}

menu_canSelected = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (!instance_exists(obj_menu_rebind))
{
    if (keyboard_check_pressed(vk_up))
    {
        menu_profileSelector --;
    }
    if (keyboard_check_pressed(vk_down))
    {
        menu_profileSelector ++;
    }
    
    switch (menu_profileSelector)
    {
        case 0:
            if (keyboard_check_pressed(vk_left))
            {
                if (menu_profilePlayer &gt; 1)
                {
                    menu_profilePlayer --;
                }
            }
            
            if (keyboard_check_pressed(vk_right))
            {
                if (menu_profilePlayer &lt; 4)
                {
                    menu_profilePlayer ++;
                }
            }
        break;
        
        case 2:
            if (keyboard_check_pressed(vk_left))
            {
                menu_variableReal[menu_profilePlayer, 2] --;
            }
            
            if (keyboard_check_pressed(vk_right))
            {
                menu_variableReal[menu_profilePlayer, 2] ++;
            }
        break;
        
        case 3:
            if (keyboard_check_pressed(vk_left))
            {
                menu_variableReal[menu_profilePlayer, 3] --;
            }
            
            if (keyboard_check_pressed(vk_right))
            {
                menu_variableReal[menu_profilePlayer, 3] ++;
            }
        break;
        
        case 4:
            if (keyboard_check_pressed(vk_left))
            {
                menu_variableReal[menu_profilePlayer, 4] --;
            }
            
            if (keyboard_check_pressed(vk_right))
            {
                menu_variableReal[menu_profilePlayer, 4] ++;
            }
        break;
    }
}

if (keyboard_check_pressed(vk_enter))
{
    switch (menu_profileSelector)
    {
        case 1:
            menu_variableText[menu_profilePlayer, 1] = get_string("Player " + string(menu_profilePlayer) + " name", string(menu_variableText[menu_profilePlayer, 1]));
        break;
        
        //key rebinding settings        
        case 5:
            var inst = instance_create(0, 0, obj_menu_rebind);
            inst.key = global.key_jump;
            inst.ID  = menu_profilePlayer;
            
            io_clear();
        break;
        
        case 6:
            var inst = instance_create(0, 0, obj_menu_rebind);
            inst.key = global.key_left;
            inst.ID  = menu_profilePlayer;
            
            io_clear();
        break;
        
        case 7:
            var inst = instance_create(0, 0, obj_menu_rebind);
            inst.key = global.key_right;
            inst.ID  = menu_profilePlayer;
            
            io_clear();
        break;
        
        case 8:
            var inst = instance_create(0, 0, obj_menu_rebind);
            inst.key = global.key_shoot;
            inst.ID  = menu_profilePlayer;
            
            io_clear();
        break;
        
        case 9:
            var inst = instance_create(0, 0, obj_menu_rebind);
            inst.key = global.key_pickup;
            inst.ID  = menu_profilePlayer;
            
            io_clear();
        break;
        
        //Save settings to a player specific .ini
        case 10:
            switch (menu_profilePlayer)
            {
                case 1:
                    ini_open(working_directory + "player1.ini");
                    
                    ini_write_string("player-settings", "name", menu_variableText[menu_profilePlayer, 1]);
                    
                    ini_write_real("player-settings", "sprite" , menu_variableReal[menu_profilePlayer, 2]);
                    ini_write_real("player-settings", "voice"  , menu_variableReal[menu_profilePlayer, 3]);
                    ini_write_real("player-settings", "control", menu_variableReal[menu_profilePlayer, 4]);
                    
                    ini_write_real("controls-keyboard", "key-jump"  , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_jump  ));
                    ini_write_real("controls-keyboard", "key-left"  , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_left  ));
                    ini_write_real("controls-keyboard", "key-right" , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_right ));
                    ini_write_real("controls-keyboard", "key-shoot" , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_shoot ));
                    ini_write_real("controls-keyboard", "key-pickup", ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_pickup));
                    
                    ini_write_real("controls-gamepad" , "key-jump"  , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_jump  ));
                    ini_write_real("controls-gamepad" , "key-left"  , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_left  ));
                    ini_write_real("controls-gamepad" , "key-right" , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_right ));
                    ini_write_real("controls-gamepad" , "key-shoot" , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_shoot ));
                    ini_write_real("controls-gamepad" , "key-pickup", ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_pickup));
                    
                    ini_close();
                break;
                
                case 2:
                    ini_open("player2.ini");
                    
                    ini_write_string("player-settings", "name", menu_variableText[menu_profilePlayer, 1]);
                    
                    ini_write_real("player-settings", "sprite" , menu_variableReal[menu_profilePlayer, 2]);
                    ini_write_real("player-settings", "voice"  , menu_variableReal[menu_profilePlayer, 3]);
                    ini_write_real("player-settings", "control", menu_variableReal[menu_profilePlayer, 4]);
                    
                    ini_write_real("controls-keyboard", "key-jump"  , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_jump  ));
                    ini_write_real("controls-keyboard", "key-left"  , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_left  ));
                    ini_write_real("controls-keyboard", "key-right" , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_right ));
                    ini_write_real("controls-keyboard", "key-shoot" , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_shoot ));
                    ini_write_real("controls-keyboard", "key-pickup", ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_pickup));
                    
                    ini_write_real("controls-gamepad" , "key-jump"  , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_jump  ));
                    ini_write_real("controls-gamepad" , "key-left"  , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_left  ));
                    ini_write_real("controls-gamepad" , "key-right" , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_right ));
                    ini_write_real("controls-gamepad" , "key-shoot" , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_shoot ));
                    ini_write_real("controls-gamepad" , "key-pickup", ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_pickup));
                    
                    ini_close();
                break;
                
                case 3:
                    ini_open("player3.ini");
                    
                    ini_write_string("player-settings", "name", menu_variableText[menu_profilePlayer, 1]);
                    
                    ini_write_real("player-settings", "sprite" , menu_variableReal[menu_profilePlayer, 2]);
                    ini_write_real("player-settings", "voice"  , menu_variableReal[menu_profilePlayer, 3]);
                    ini_write_real("player-settings", "control", menu_variableReal[menu_profilePlayer, 4]);
                    
                    ini_write_real("controls-keyboard", "key-jump"  , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_jump  ));
                    ini_write_real("controls-keyboard", "key-left"  , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_left  ));
                    ini_write_real("controls-keyboard", "key-right" , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_right ));
                    ini_write_real("controls-keyboard", "key-shoot" , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_shoot ));
                    ini_write_real("controls-keyboard", "key-pickup", ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_pickup));
                    
                    ini_write_real("controls-gamepad" , "key-jump"  , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_jump  ));
                    ini_write_real("controls-gamepad" , "key-left"  , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_left  ));
                    ini_write_real("controls-gamepad" , "key-right" , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_right ));
                    ini_write_real("controls-gamepad" , "key-shoot" , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_shoot ));
                    ini_write_real("controls-gamepad" , "key-pickup", ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_pickup));
                    
                    ini_close();
                break;
                
                case 4:
                    ini_open("player4.ini");
                    
                    ini_write_string("player-settings", "name", menu_variableText[menu_profilePlayer, 1]);
                    
                    ini_write_real("player-settings", "sprite" , menu_variableReal[menu_profilePlayer, 2]);
                    ini_write_real("player-settings", "voice"  , menu_variableReal[menu_profilePlayer, 3]);
                    ini_write_real("player-settings", "control", menu_variableReal[menu_profilePlayer, 4]);
                    
                    ini_write_real("controls-keyboard", "key-jump"  , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_jump  ));
                    ini_write_real("controls-keyboard", "key-left"  , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_left  ));
                    ini_write_real("controls-keyboard", "key-right" , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_right ));
                    ini_write_real("controls-keyboard", "key-shoot" , ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_shoot ));
                    ini_write_real("controls-keyboard", "key-pickup", ds_grid_get(con_unifiedInput.input_keyboardGrid, menu_profilePlayer, global.key_pickup));
                    
                    ini_write_real("controls-gamepad" , "key-jump"  , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_jump  ));
                    ini_write_real("controls-gamepad" , "key-left"  , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_left  ));
                    ini_write_real("controls-gamepad" , "key-right" , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_right ));
                    ini_write_real("controls-gamepad" , "key-shoot" , ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_shoot ));
                    ini_write_real("controls-gamepad" , "key-pickup", ds_grid_get(con_unifiedInput.input_gamepadGrid , menu_profilePlayer, global.key_pickup));
                    
                    ini_close();
                break;
            }
        break;
        
        case 11:
            instance_create(0, 0, obj_menu_main);
            instance_destroy();
        break;
    }
}

menu_profile_variableText();

menu_profileSelector = clamp(menu_profileSelector, 0, 11);

for (var i = 0; i &lt; 5; i ++)
{
    menu_variableText[i, 0] = menu_profilePlayer;
}

for (var i = 1; i &lt; 5; i ++)
{
    menu_variableReal[i, 2] = clamp(menu_variableReal[i, 2], 0, 3);
    menu_variableReal[i, 3] = clamp(menu_variableReal[i, 3], 0, 4);
    menu_variableReal[i, 4] = clamp(menu_variableReal[i, 4], 0, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_halign(0);
draw_set_valign(1);
draw_set_font(fnt_roboto_25);

for (var i = 0; i &lt; 12; i ++)
{
    if (menu_profileSelector == i)
    {
        draw_set_colour(c_red);
        draw_text(64 , 64 + (i * 32), string(menu_profileText[i]));
        draw_text(512, 64 + (i * 32), string(menu_variableText[menu_profilePlayer, i]));
    }
    else
    {
        draw_set_colour(c_black);
        draw_text(64 , 64 + (i * 32), string(menu_profileText[i]));
        draw_text(512, 64 + (i * 32), string(menu_variableText[menu_profilePlayer, i]));
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
