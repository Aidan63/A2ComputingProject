<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Player Variables
//-----------------------------------//

//Change These
acc       = 0.7;
deacc     = 0.5;
maxvspeed = 12;
maxhspeed = 7;

//ice physics
iceacc       = 0.1;
icedeacc     = 0.05;
maxicevspeed = 5.5;
maxicehspeed = 5;

//water
wateracc       = 0.1;
waterdeacc     = 0.34;
maxwatervspeed = 2;
maxwaterhspeed = 2;

//jumping
jumps         =  2;
maxjumpspeed  =- 20;
jumpspeed     =- 6;
walljumpspeed =- 5;

//variable in play (do not change)
_maxvspeed = 5.5;
_maxhspeed = 5;
_dj        = 2;
_acc       = 0.23;
_deacc     = 0.34;

player_hspeed = 0;

//-----------------------------------//



//-----------------------------------//

image_speed = 0.1;

plyr_controlID  = 1;
plyr_teamID     = 1;
plyr_teamColour = c_white;
plyr_weaponY    = 0;
plyr_weaponX    = 24;
plyr_xscale     = 1;
plyr_canShoot   = true;

plyr_health     = 100;
plyr_healthMax  = 100;

plyr_hasFlag    = false;

plyr_showName   = true;
alarm[6] = 60 * 3;

isGrounded = false;

//-----------------------------------//



//Weapons
//-----------------------------------//

plyr_currentWep    = 0;
plyr_wepSprite     = spr_playerWep_mg;
plyr_drawProjec    = false;
plyr_wepOffset     = 0;
plyr_projecWepID   = "";

increment = 0;

wep_spreadMod = 0;

//Weapons Names
wep_mg = 0;
wep_sg = 1;
wep_rl = 2;
wep_gl = 3;
wep_pg = 4;
wep_rg = 5;

//Weapon Properties
name     = 0;
ammoMax  = 1;
ammoNow  = 2;
coolDown = 3;
damage   = 4;

railgunDraw = false;

for (var i = 0; i &lt; 12; i++)
{
    hitscan_x1[i] = 0;
    hitscan_y1[i] = 0;
    hitscan_x2[i] = 0;
    hitscan_y2[i] = 0;
}

//Add the names and properies to an array
weaponsSystem[wep_mg, name    ] = "machine gun";
weaponsSystem[wep_mg, ammoMax ] = 100;
weaponsSystem[wep_mg, ammoNow ] = 100;
weaponsSystem[wep_mg, coolDown] = 6;
weaponsSystem[wep_mg, damage  ] = 5;

weaponsSystem[wep_sg, name    ] = "shotgun";
weaponsSystem[wep_sg, ammoMax ] = 25;
weaponsSystem[wep_sg, ammoNow ] = 0;
weaponsSystem[wep_sg, coolDown] = 60;
weaponsSystem[wep_sg, damage  ] = 7;

weaponsSystem[wep_rl, name    ] = "rocket launcher";
weaponsSystem[wep_rl, ammoMax ] = 10;
weaponsSystem[wep_rl, ammoNow ] = 0;
weaponsSystem[wep_rl, coolDown] = 75;
weaponsSystem[wep_rl, damage  ] = 100;

weaponsSystem[wep_gl, name    ] = "grenade launcher";
weaponsSystem[wep_gl, ammoMax ] = 20;
weaponsSystem[wep_gl, ammoNow ] = 0;
weaponsSystem[wep_gl, coolDown] = 45;
weaponsSystem[wep_gl, damage  ] = 50;

weaponsSystem[wep_rg, name    ] = "railgun";
weaponsSystem[wep_rg, ammoMax ] = 5;
weaponsSystem[wep_rg, ammoNow ] = 0;
weaponsSystem[wep_rg, coolDown] = 90;
weaponsSystem[wep_rg, damage  ] = 100;

weaponsSystem[wep_pg, name    ] = "plasma gun";
weaponsSystem[wep_pg, ammoMax ] = 25;
weaponsSystem[wep_pg, ammoNow ] = 0;
weaponsSystem[wep_pg, coolDown] = 6;
weaponsSystem[wep_pg, damage  ] = 20;

//-----------------------------------//



//-----------------------------------//

if (global.game_gamemode == 2)
{
    plyr_currentWep = 5;
    weaponsSystem[wep_rg, ammoMax] = 1000;
    weaponsSystem[wep_rg, ammoNow] = 1000;
}

//-----------------------------------//

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var sound = choose(audio_playerDeath1, audio_playerDeath2, audio_playerDeath3);
audio_play_sound(sound, 0, false);

con_gameStats.globalStats[plyr_controlID, con_gameStats.stat_deaths] ++;

if (plyr_hasFlag == true)
{
    var flag = instance_create(x, y, obj_flag);
    with (flag)
    {
        motion_add(random_range(45, 135), 6);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn off name showing

plyr_showName = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Oddball score increaser
if (plyr_hasFlag == true)
{
    con_gameStats.globalStats_teamScore[plyr_teamID] ++;
    con_gameStats.globalStats[plyr_teamID, con_gameStats.stat_gamePoints] ++
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (global.game_state == global.game_active)
{
    con_gameStats.globalStats[plyr_controlID, con_gameStats.stat_kills] ++;
    con_gameStats.globalStats_teamScore[plyr_teamID] ++;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset tracer drawing
plyr_drawProjec = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Footsteps sounds
if (player_hspeed != 0 &amp;&amp; !place_free(x, y + 1))
{
    var sound = choose(global.audio_effect_footsteps1, global.audio_effect_footsteps2, global.audio_effect_footsteps3, global.audio_effect_footsteps4);
    audio_play_sound(sound, 0, false);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset railgun drawing
railgunDraw = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can shoot again!

plyr_canShoot = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics yo!

event_inherited();

//ice physics
//-----------------------------------//

if place_meeting(x, y + 1, par_ice) &amp;&amp; !place_meeting(x, y, par_water)
{
    _acc       = iceacc;
    _deacc     = icedeacc;
    _maxvspeed = maxicevspeed;
    _maxhspeed = maxicehspeed;
}

//-----------------------------------//



//normal physics
//-----------------------------------//

if !place_meeting(x, y + 1, par_ice) &amp;&amp; !place_meeting(x, y, par_water)
{
    _acc       = acc;
    _deacc     = deacc;
    _maxvspeed = maxvspeed;
    _maxhspeed = maxhspeed;
}

//-----------------------------------//



//water physics
//-----------------------------------//

if place_meeting(x, y, par_water)
{
    _acc       = wateracc;
    _deacc     = waterdeacc;
    _maxvspeed = maxwatervspeed;
    _maxhspeed = maxwaterhspeed;
}

//-----------------------------------//



//slow the character down
//-----------------------------------//

if (!unifiedInput_down(plyr_controlID, global.key_right) &amp;&amp; !unifiedInput_down(plyr_controlID, global.key_left)) || (unifiedInput_down(plyr_controlID, global.key_right) &amp;&amp; unifiedInput_down(plyr_controlID, global.key_left))
{
    if (player_hspeed &gt; 0)
    {
        player_hspeed -= _deacc;
        player_hspeed = max(player_hspeed, 0);
    }
    if (player_hspeed &lt; 0)
    {
        player_hspeed += _deacc;
        player_hspeed = min(player_hspeed, 0);
    }
}

//-----------------------------------//



//movement and acceleration
//-----------------------------------//

if (global.game_state == global.game_active)
{
    if (unifiedInput_down(plyr_controlID, global.key_right))
    {
        plyr_xscale = 1;
        player_hspeed += _acc;
    }
    if (unifiedInput_down(plyr_controlID, global.key_left))
    {
        plyr_xscale = -1;
        player_hspeed -= _acc;
    }
    
    repeat (abs(player_hspeed))
    {
        if place_free(x + sign(player_hspeed), y)
        {
            x += sign(player_hspeed);
            if (!place_free(x, y + 2) &amp;&amp; place_free(x, y + 1))
            {
                y += 1;
            }
        }
        else
        {
            if place_free(x + sign(player_hspeed), y - 1)
            {
                y -= 1;
                x += sign(player_hspeed);
            }
            else
            {
                player_hspeed = 0;
                break;
            }
        }
    }
}

if (player_hspeed = 0)
{
    run = false;
}
else
{
    run = true;
}

//-----------------------------------//



//limit horizontal speed
//-----------------------------------//

player_hspeed = min(_maxhspeed, max(player_hspeed, -_maxhspeed));
vspeed = min(_maxvspeed, max(vspeed, maxjumpspeed));

//-----------------------------------//



//Jumping!!!
//-----------------------------------//

if (global.game_state == global.game_active)
{
    //wall jump left
    if (!place_free(x + 1, y) &amp;&amp; place_free(x, y + 1) &amp;&amp; unifiedInput_down(plyr_controlID, global.key_right) &amp;&amp; unifiedInput_pressed(plyr_controlID, global.key_jump))
    {
        vspeed = walljumpspeed
        player_hspeed = -_maxhspeed;
        
        audio_play_sound(audio_playerJump, 0, false);
    }
    //wall jump right
    if (!place_free(x - 1, y) &amp;&amp; place_free(x, y + 1) &amp;&amp; unifiedInput_down(plyr_controlID, global.key_left) &amp;&amp; unifiedInput_pressed(plyr_controlID, global.key_jump))
    {
        vspeed = walljumpspeed
        player_hspeed = _maxhspeed;
        
        audio_play_sound(audio_playerJump, 0, false);
    }
    
    //normal jump
    if ((unifiedInput_pressed(plyr_controlID, global.key_jump)) &amp;&amp; _dj &gt; 1)
    {
        if (place_free(x, y + 1))
        {
            if (unifiedInput_down(plyr_controlID, global.key_left) &amp;&amp; !place_free(x - 1, y) || unifiedInput_down(plyr_controlID, global.key_right) &amp;&amp; !place_free(x + 1, y))
            {
                exit;
            }
        }
            _dj -= 1;
            vspeed = jumpspeed;
            
        audio_play_sound(audio_playerJump, 0, false);
    }
    
    //infinite jumping under water
    if place_meeting(x, y, par_water)
    {
        _dj = jumps;
    }
            
    //put jumps to normal
    if place_meeting(x, y + 1, par_solid)
    { 
        _dj = jumps;
        
        if (isGrounded == false)
        {
            isGrounded = true;
            
            audio_play_sound(global.audio_effect_playerLand, 0, false);
        }
    }
    else
    {
        isGrounded = false;
    }
}

//-----------------------------------//



//Gravity
//-----------------------------------//

setGravity();

//-----------------------------------//



//Some gamemode specific code
//-----------------------------------//

//Insta jib gamemode
if (global.game_gamemode == 3)
{
    if (alarm[5] == -1)
    {
        alarm[5] = 60;
    }
}

//-----------------------------------//

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapons and Teams

if (global.game_state == global.game_active)
{
    playerWeapons();
}

if (global.game_state == global.game_active || global.game_state == global.game_warmup)
{    
    switch (plyr_teamID)
    {
        case 1:
            plyr_teamColour = c_aqua;
        break;
        
        case 2:
            plyr_teamColour = c_red;
        break;
        
        case 3:
            plyr_teamColour = c_lime;
        break;
        
        case 4:
            plyr_teamColour = c_yellow;
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation

if (global.game_state == global.game_active)
{
    //Decide weapon sprite and weapon recoil animations
    switch (plyr_currentWep)
    {
        case wep_mg:
            plyr_wepSprite = spr_playerWep_mg;
            
            if (unifiedInput_down(plyr_controlID, global.key_shoot))
            {
                increment ++;
                plyr_wepOffset = 4 * sin(increment);
                
                if (run == false)
                {
                    if (isGrounded == true)
                    {
                        sprite_index = plyr_sprite_idle;
                        image_index  = 0;
                        image_speed  = 0;
                    }
                }
            }
            else
            {
                plyr_wepOffset = 0;
            }
        break;
        
        case wep_sg:
            plyr_wepSprite = spr_playerWep_sg;
        break;
        
        case wep_rl:
            plyr_wepSprite = spr_playerWep_rl;
        break;
        
        case wep_gl:
            plyr_wepSprite = spr_playerWep_gl;
        break;
        
        case wep_pg:
            plyr_wepSprite = spr_playerWep_pg;
            
            if (unifiedInput_down(plyr_controlID, global.key_shoot))
            {
                increment ++;
                plyr_wepOffset = 4 * sin(increment);
                
                if (run == false)
                {
                    if (isGrounded == true)
                    {
                        sprite_index = plyr_sprite_idle;
                        image_index  = 0;
                        image_speed  = 0;
                    }
                }
            }
            else
            {
                plyr_wepOffset = 0;
            }
        break;
        
        case wep_rg:
            plyr_wepSprite = spr_playerWep_rg;
        break;
    }
}

//Decide On Player Sprite
if (run == false &amp;&amp; place_meeting(x, y + 1, par_solid))
{
    sprite_index = plyr_sprite_idle;
    image_speed  = 0.1;
}

if (run == true &amp;&amp; place_meeting(x, y + 1, par_solid))
{
    sprite_index = plyr_sprite_walk;
    image_speed  = 0.15;
}

if (place_free(x, y + 1))
{
    if (vspeed &lt; 0)
    {
        sprite_index = plyr_sprite_jump;
        image_index  = 1;
        image_speed  = 0;
    }
    else
    {
        sprite_index = plyr_sprite_jump;
        image_index  = 0;
        image_speed  = 0;
    }
}

//Set Weapon Y Offset
switch (sprite_index)
{
    case plyr_sprite_idle:
        if (floor(image_index) == 1)
        {
            plyr_weaponY = -4;
        }
        else
        {
            plyr_weaponY = 0;
        }
    break;
    
    case plyr_sprite_jump:
        if (floor(image_index) == 0)
        {
            plyr_weaponY = -4;
        }
        else
        {
            plyr_weaponY = 0;
        }
    break;
    
    case plyr_sprite_walk:
        if (floor(image_index) == 1)
        {
            plyr_weaponY = -4;
        }
        else
        {
            plyr_weaponY = 0;
        }
    break;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health

if (plyr_health &lt;= 0)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Footstep Sound

if (player_hspeed != 0 &amp;&amp; !place_free(x, y + 1))
{
    if (alarm[2] == -1)
    {
        alarm[2] = room_speed / 4;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flag">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
plyr_hasFlag = true;

with (obj_flag)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pickup_stand">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (unifiedInput_down(plyr_controlID, global.key_pickup))
{
    if (other.pickup_active == true)
    {
        other.pickup_active = false;
        
        switch (other.pickup_type)
        {
            case 1:
                plyr_currentWep = wep_mg;
                other.alarm[0] = 60 * 2;
            break;
            
            case 2:
                plyr_currentWep = wep_sg;
                other.alarm[0] = 60 * 5;
            break;
            
            case 3:
                plyr_currentWep = wep_rl;
                other.alarm[0] = 60 * 15;
            break;
            
            case 4:
                plyr_currentWep = wep_gl;
                other.alarm[0] = 60 * 10;
            break;
            
            case 5:
                plyr_currentWep = wep_pg;
                other.alarm[0] = 60 * 30;
            break;
            
            case 6:
                plyr_currentWep = wep_rg;
                other.alarm[0] = 60 * 60;
            break;
        }
        
        weaponsSystem[plyr_currentWep, ammoNow] += weaponsSystem[plyr_currentWep, ammoMax];
        
        audio_play_sound(global.audio_effect_wepChange, 0, false);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (other.bul_teamID != plyr_teamID)
{
    plyr_health -= other.bul_damage;
    
    con_gameStats.globalStats[other.bul_plyrNo, con_gameStats.stat_shotsHit] ++;
    
    audio_play_sound(global.audio_effect_hit, 0, false);
}

if (plyr_health &gt; 0)
{
    if (!audio_is_playing(audio_playerHit))
    {
        audio_play_sound(audio_playerHit, 0, false);
    }
}

if (plyr_health &lt;= 0)
{
    if (other.bul_wepID == "rl" || other.bul_wepID == "gl")
    {
        for (var i = 0; i &lt; 5; i ++)
        {
            var jib = instance_create(x, y, obj_player_jibs);
            jib.image_index = i;
            jib.colour = plyr_teamColour;
            
            with (jib)
            {
                motion_set(random_range(45, 135), 6);
            }
        }
    }
    
    con_gameStats.globalStats[other.bul_plyrNo, con_gameStats.stat_kills] ++;
    con_gameStats.globalStats_teamScore[other.bul_teamID] ++;
}

with (other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Wall collisions
//-----------------------------------//

move_contact_solid(direction, 8);
vspeed = 0;

//-----------------------------------//

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (railgunDraw == true)
{
    var baseDir = 0;
    var xoffset = 0;
    if (plyr_xscale == 1)
    {
        baseDir = 0;
        xoffset = 48;
    }
    else
    {
        baseDir = 180;
        xoffset = -48;
    }
    
    var laser_length = 1;
    
    repeat(1920)
    {
        var target = collision_line(x, y, x + lengthdir_x(laser_length, baseDir), y , par_entity, true, true);
        if (target != noone)
        {
            break;
        }
        
        laser_length ++;
    }
    
    draw_line_width_color(x, y, x + lengthdir_x(laser_length, baseDir), y, 4, c_red, c_red);
}

if (plyr_drawProjec == true)
{
    var baseDir = 0;
    var xoffset = 0;
    if (plyr_xscale == 1)
    {
        baseDir = 0;
        xoffset = 42;
    }
    else
    {
        baseDir = 180;
        xoffset = -42;
    }
    
    draw_set_colour(c_yellow);
    
    if (plyr_currentWep == wep_mg)
    {
        draw_line_width(x, y, x + lengthdir_x(hitscan_x2[0], baseDir), hitscan_y2[0], 3);
    }
    else
    {
        for (var i = 0; i &lt; 11; i ++)
        {
            draw_line_width(x, y, x + lengthdir_x(hitscan_x2[i], baseDir), hitscan_y2[i], 3);
        }
    }
    
    if (alarm[3] == -1)
    {
        alarm[3] = 2;
    }
}

//Draw Player
if (con_game.player_sprite[plyr_controlID] == 2)
{
    draw_sprite_ext(plyr_sprite_back, image_index, x, y, plyr_xscale, image_yscale, image_angle, c_white, image_alpha);
}
draw_sprite_ext(sprite_index, image_index, x, y, plyr_xscale, image_yscale, image_angle, plyr_teamColour, image_alpha);

//Draw Player Weapon Layers
if (plyr_xscale == 1)
{
    draw_sprite_ext(plyr_wepSprite, 0, x - plyr_weaponX + plyr_wepOffset, y + plyr_weaponY, plyr_xscale, image_yscale, image_angle, plyr_teamColour, image_alpha);
    draw_sprite_ext(plyr_wepSprite, 1, x - plyr_weaponX + plyr_wepOffset, y + plyr_weaponY, plyr_xscale, image_yscale, image_angle, c_white        , image_alpha);
    draw_sprite_ext(plyr_wepSprite, 2, x - plyr_weaponX + plyr_wepOffset, y + plyr_weaponY, plyr_xscale, image_yscale, image_angle, plyr_teamColour, image_alpha);
}
else
{
    draw_sprite_ext(plyr_wepSprite, 0, x + plyr_weaponX + plyr_wepOffset, y + plyr_weaponY, plyr_xscale, image_yscale, image_angle, plyr_teamColour, image_alpha);
    draw_sprite_ext(plyr_wepSprite, 1, x + plyr_weaponX + plyr_wepOffset, y + plyr_weaponY, plyr_xscale, image_yscale, image_angle, c_white        , image_alpha);
    draw_sprite_ext(plyr_wepSprite, 2, x + plyr_weaponX + plyr_wepOffset, y + plyr_weaponY, plyr_xscale, image_yscale, image_angle, plyr_teamColour, image_alpha);
}

if (plyr_hasFlag)
{
    draw_sprite(spr_flag, 0, x, y - 64);
}

if (plyr_showName == true)
{
    draw_set_halign(1);
    draw_set_valign(1);
    
    draw_set_font(fnt_roboto_15);
    
    draw_text(x, y - 48, con_game.player_name[plyr_controlID]);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>30,30</point>
    <point>30,30</point>
  </PhysicsShapePoints>
</object>
