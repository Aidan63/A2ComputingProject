<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
menu_setupSelector  = 0;

menu_setupText[0] = "Player 1 Team";
menu_setupText[1] = "Player 2 Team";
menu_setupText[2] = "Player 3 Team";
menu_setupText[3] = "Player 4 Team";
menu_setupText[4] = "Gamemode"     ;
menu_setupText[5] = "Points"       ;
menu_setupText[6] = "Arena"        ;
menu_setupText[7] = "Start"        ;
menu_setupText[8] = "Back"         ;

//Real Variables
menu_variableReal[0] = 1 ;
menu_variableReal[1] = 2 ;
menu_variableReal[2] = 3 ;
menu_variableReal[3] = 4 ;
menu_variableReal[4] = 0 ;
menu_variableReal[5] = 25;
menu_variableReal[6] = 0 ;

//String Variable
menu_variableText[0] = "Blue"  ;
menu_variableText[1] = "Red"   ;
menu_variableText[2] = "Green" ;
menu_variableText[3] = "Yellow";
menu_variableText[4] = "Deathmatch";
menu_variableText[5] = menu_variableReal[5];
menu_variableText[6] = "Arena " + string(menu_variableReal[6] + 1);
menu_variableText[7] = "";
menu_variableText[8] = "";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (keyboard_check_pressed(vk_up))
{
    menu_setupSelector --;
}
if (keyboard_check_pressed(vk_down))
{
    menu_setupSelector ++;
}

switch (menu_setupSelector)
{
    case 0:
        if (keyboard_check_pressed(vk_left))
        {
            menu_variableReal[0] --;
        }
        
        if (keyboard_check_pressed(vk_right))
        {
            menu_variableReal[0] ++;
        }
    break;
    
    case 1:
        if (keyboard_check_pressed(vk_left))
        {
            menu_variableReal[1] --;
        }
        
        if (keyboard_check_pressed(vk_right))
        {
            menu_variableReal[1] ++;
        }
    break;
    
    case 2:
        if (keyboard_check_pressed(vk_left))
        {
            menu_variableReal[2] --;
        }
        
        if (keyboard_check_pressed(vk_right))
        {
            menu_variableReal[2] ++;
        }
    break;
    
    case 3:
        if (keyboard_check_pressed(vk_left))
        {
            menu_variableReal[3] --;
        }
        
        if (keyboard_check_pressed(vk_right))
        {
            menu_variableReal[3] ++;
        }
    break;
    
    case 4:
        if (keyboard_check_pressed(vk_left))
        {
            menu_variableReal[4] --;
        }
        
        if (keyboard_check_pressed(vk_right))
        {
            menu_variableReal[4] ++;
        }
    break;
    
    case 5:
        if (keyboard_check(vk_left))
        {
            menu_variableReal[5] --;
        }
        
        if (keyboard_check(vk_right))
        {
            menu_variableReal[5] ++;
        }
    break;
    
    case 6:
        if (keyboard_check_pressed(vk_left))
        {
            menu_variableReal[6] --;
        }
        
        if (keyboard_check_pressed(vk_right))
        {
            menu_variableReal[6] ++;
        }
    break;
}

if (keyboard_check_pressed(vk_enter))
{
    switch (menu_setupSelector)
    {
        case 7:
            global.game_playerTeam[1] = menu_variableReal[0];
            global.game_playerTeam[2] = menu_variableReal[1];
            global.game_playerTeam[3] = menu_variableReal[2];
            global.game_playerTeam[4] = menu_variableReal[3];
            
            global.game_gamemode   = menu_variableReal[4];
            global.game_modePoints = menu_variableReal[5];
            
            var arena_roomName = asset_get_index("rm_arena" + string(menu_variableReal[6] + 1));
            
            room_goto(arena_roomName);
        break;
        
        case 8:
            instance_create(0, 0, obj_menu_main);
            instance_destroy();
        break;
    }
}

menu_setup_variableText();

menu_setupSelector = clamp(menu_setupSelector, 0, 8);

for (var i = 0; i &lt; 4; i ++)
{
    menu_variableReal[i] = clamp(menu_variableReal[i], 1, 5);
}

menu_variableReal[4] = clamp(menu_variableReal[4], 0, 3  );
menu_variableReal[5] = clamp(menu_variableReal[5], 1, 250);
menu_variableReal[6] = clamp(menu_variableReal[6], 0, 4  );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_halign(0);
draw_set_valign(1);
draw_set_font(fnt_roboto_25);

for (var i = 0; i &lt; 9; i ++)
{
    if (menu_setupSelector == i)
    {
        draw_set_colour(c_red);
        draw_text(64 , 64 + (i * 32), string(menu_setupText[i]));
        draw_text(512, 64 + (i * 32), string(menu_variableText[i]));
    }
    else
    {
        draw_set_colour(c_black);
        draw_text(64 , 64 + (i * 32), string(menu_setupText[i]));
        draw_text(512, 64 + (i * 32), string(menu_variableText[i]));
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
